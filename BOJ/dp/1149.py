# RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로
# 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값
# 집은 빨강, 초록, 파랑 중 하나의 색
# 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
# N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
# i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.

# input
# 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)
# 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다.
# dp 테이블에서 색상에 대한 추가적인 정보를 2차원 배열로 표현
# 1. 테이블 정의
# D[i][0] = i번째 집까지 칠할 때 비용의 최솟값, 단 i번쨰 집은 빨강
# D[i][1] = i번째 집까지 칠할 때 비용의 최솟값, 단 i번쨰 집은 초록
# D[i][2] = i번째 집까지 칠할 때 비용의 최솟값, 단 i번쨰 집은 파랑
# 2. 점화식
# k번째 집을 빨강으로 칠할 떄
# D[k][0] = min(D[k-1][1], D[k-1][2]) + R[k], R[k]: k번쨰 집을 빨강으로 칠할 떄 드는 비
# D[k][1] = min(D[k-1][0], D[k-1][2]) + G[k]
# D[k][2] = min(D[k-1][0], D[k-1][1]) + B[k]
# 3. 초기값 정하기
# D[1][0] = R[1]
# D[1][1] = G[1]
# D[1][2] = B[1]

import sys
input = sys.stdin.readline
N = int(input())
dp = [[0]]

for _ in range(N):
    dp.append(list(map(int, input().strip().split())))
print(dp)
for i in range(2, N+1):
    dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + dp[i][0]
    dp[i][1] = min(dp[i-1][2], dp[i-1][0]) + dp[i][1]
    dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + dp[i][2]

print(min(dp[N]))